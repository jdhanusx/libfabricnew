.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "fi_cxi" "7" "\[at]DATE\[at]" "Libfabric Programmer\[cq]s Manual" "\[at]VERSION\[at]"
.hy
.SH NAME
.PP
fi_cxi - The CXI Fabric Provider
.SH OVERVIEW
.PP
The CXI provider enables libfabric on Cray\[cq]s Slingshot network.
Slingshot is comprised of the Rosetta switch and Cassini NIC.
Slingshot is an Ethernet-compliant network.
However, The provider takes advantage of proprietary extensions to
support HPC applications.
.PP
The CXI provider supports reliable, connection-less endpoint semantics.
It supports two-sided messaging interfaces with message matching
offloaded by the Cassini NIC.
It also supports one-sided RMA and AMO interfaces, light-weight counting
events, triggered operations (via the deferred work API), and
fabric-accelerated small reductions.
.SH REQUIREMENTS
.PP
The CXI Provider requires Cassini\[cq]s optimized HPC protocol which is
only supported in combination with the Rosetta switch.
.PP
The provider uses the libCXI library for control operations and a set of
Cassini-specific header files to enable direct hardware access in the
data path.
.SH SUPPORTED FEATURES
.PP
The CXI provider supports a subset of OFI features.
.SS Endpoint types
.PP
The provider supports the \f[I]FI_EP_RDM\f[R] endpoint type, including
scalable endpoints.
.SS Address vectors
.PP
The provider implements both the \f[I]FI_AV_MAP\f[R] and
\f[I]FI_AV_TABLE\f[R] address vector types.
\f[I]FI_EVENT\f[R] is unsupported.
.SS Memory registration modes
.PP
The provider implements scalable memory registration.
The provider requires \f[I]FI_MR_ENDPOINT\f[R].
.SS Data transfer operations
.PP
The following data transfer interfaces are supported:
\f[I]FI_ATOMIC\f[R], \f[I]FI_MSG\f[R], \f[I]FI_RMA\f[R],
\f[I]FI_TAGGED\f[R].
See DATA TRANSFER OPERATIONS below for more details.
.SS Completion events
.PP
The CXI provider supports all CQ event formats.
Wait objects are not currently supported.
.SS Modes
.PP
The CXI provider does not require any operation modes.
.SS Progress
.PP
The CXI provider currently supports \f[I]FI_PROGRESS_MANUAL\f[R] data
and control progress modes.
.SS Multi-threading
.PP
The CXI provider does not currently optimize for threading model.
Data transfer and control interfaces are always considered thread-safe.
.SS Wait Objects
.PP
The CXI provider does not currently support wait objects.
.SS Additional Features
.PP
The CXI provider also supports the following capabilities and features:
.IP \[bu] 2
\f[I]FI_MULTI_RECV\f[R]
.IP \[bu] 2
\f[I]FI_SOURCE\f[R]
.IP \[bu] 2
\f[I]FI_NAMED_RX_CTX\f[R]
.IP \[bu] 2
\f[I]FI_SHARED_AV\f[R]
.IP \[bu] 2
\f[I]FI_RM_ENABLED\f[R]
.IP \[bu] 2
\f[I]FI_RMA_EVENT\f[R]
.IP \[bu] 2
\f[I]FI_REMOTE_CQ_DATA\f[R]
.IP \[bu] 2
\f[I]FI_MORE\f[R]
.IP \[bu] 2
\f[I]FI_FENCE\f[R]
.SS Addressing Format
.PP
The CXI provider uses a proprietary address format.
This format includes fields for NIC Address and PID.
NIC Address is the topological address of the NIC endpoint on the
fabric.
All OFI Endpoints sharing a Domain share the same NIC Address.
PID (for Port ID or Process ID, adopted from the Portals 4
specification), is analogous to an IP socket port number.
Valid PIDs are in the range [0-510].
.PP
A third component of Slingshot network addressing is the Virtual Network
ID (VNI).
VNI is a protection key used by the Slingshot network to provide
isolation between applications.
A VNI defines an isolated PID space for a given NIC.
Therefore, Endpoints must use the same VNI in order to communicate.
Note that VNI is not a field of the CXI address, but rather is specified
as part of the OFI Endpoint auth_key.
The combination of NIC Address, VNI, and PID is unique to a single OFI
Endpoint within a Slingshot fabric.
.PP
The NIC Address of an OFI Endpoint is inherited from the Domain.
By default, a PID is automatically assigned to an Endpoint when it is
enabled.
The address of an Endpoint can be queried using fi_getname.
The address received from fi_getname may then be inserted into a
peer\[cq]s Address Vector.
The resulting FI address may then be used to perform an RDMA operation.
.PP
Alternatively, a client may manage PID assignment.
fi_getinfo may be used to create an fi_info structure that can be used
to create an Endpoint with a client-specified address.
To achieve this, use fi_getinfo with the \f[I]FI_SOURCE\f[R] flag set
and set node and service strings to represent the local NIC interface
and PID to be assigned to the Endpoint.
The NIC interface string should match the name of an available CXI
domain (in the format cxi[0-9]).
The PID string will be interpreted as a 9-bit integer.
Address conflicts will be detected when the Endpoint is enabled.
.PP
A Scalable Endpoint is assigned one PID for each pair of TX/RX contexts
supported.
.SS Authorization Keys
.PP
The CXI authorization key format is defined by struct cxi_auth_key.
This structure is defined in fi_cxi_ext.h.
.IP
.nf
\f[C]
struct cxi_auth_key {
    uint32_t svc_id;
    uint16_t vni;
};
\f[R]
.fi
.PP
The CXI authorization key format includes a VNI and CXI service ID.
VNI is a component of the CXI Endpoint address that provides isolation.
A CXI service is a software container which defines a set of local CXI
resources, VNIs, and Traffic Classes which a process can access.
.PP
Two endpoints must use the same VNI in order to communicate.
Generally, a parallel application should be assigned to a unique VNI on
the fabric in order to achieve network traffic and address isolation.
Typically a privileged entity, like a job launcher, will allocate one or
more VNIs for use by an application.
.PP
The CXI service API is provided by libCXI.
It enables a privileged entity, like an application launcher, to control
an unprivileged process\[cq]s access to NIC resources.
Generally, a parallel application should be assigned to a unique CXI
service in order to control access to local resources, VNIs, and Traffic
Classes.
.PP
An application provided authorization key is optional.
If an authorization key is not provided by the application, a default
VNI and service will be assigned.
Isolation is not guaranteed when using a default VNI and service.
.PP
A custom authorization key must be provided during Domain allocation.
An Endpoint will inherit the parent Domain\[cq]s VNI and service ID.
It is an error to create an Endpoint with VNI or service ID that does
not match the parent Domain.
.PP
The expected application launch workflow for a CXI-integrated launcher
is as follows:
.IP "1." 3
A parallel application is launched.
.IP "2." 3
The launcher allocates one or more VNIs for use by the application.
.IP "3." 3
The launcher communicates with compute node daemons where the
application will be run.
.IP "4." 3
The launcher compute node daemon configures local CXI interfaces.
libCXI is used to allocate one or more services for the application.
The service will define the local resources, VNIs, and Traffic Classes
that the application may access.
Service allocation policies must be defined by the launcher.
libCXI returns an ID to represent a service.
.IP "5." 3
The launcher forks application processes.
.IP "6." 3
The launcher provides one or more service IDs and VNI values to the
application processes.
.IP "7." 3
Application processes select from the list of available service IDs and
VNIs to form an authorization key to use for Endpoint allocation.
.SS Address Vectors
.PP
Currently, the CXI provider supports both \f[I]FI_AV_TABLE\f[R] and
\f[I]FI_AV_MAP\f[R] with the same internal implementation.
Optimizations are planned for \f[I]FI_AV_MAP\f[R].
In the future, when using \f[I]FI_AV_MAP\f[R], the CXI address will be
encoded in the FI address.
This will avoid per-operation node address translation and reduce AV
memory footprint.
.PP
The CXI provider uses the \f[I]FI_SYMMETRIC\f[R] AV flag for
optimization.
When a client guarantees that all processes have symmetric AV layout,
the provider uses FI addresses for source address matching (rather than
physical addresses).
This reduces the overhead for source address matching during two-sided
Receive operations.
.SS Operation flags
.PP
The CXI provider supports the following Operation flags:
.TP
\f[I]FI_MORE\f[R]
When \f[I]FI_MORE\f[R] is specified in a data transfer operation, the
provider will defer submission of RDMA commands to hardware.
When one or more data transfer operations is performed using
\f[I]FI_MORE\f[R], followed by an operation without \f[I]FI_MORE\f[R],
the provider will submit the entire batch of queued operations to
hardware using a single PCIe transaction, improving PCIe efficiency.
.RS
.PP
When \f[I]FI_MORE\f[R] is used, queued commands will not be submitted to
hardware until another data transfer operation is performed without
\f[I]FI_MORE\f[R].
.RE
.TP
\f[I]FI_TRANSMIT_COMPLETE\f[R]
By default, all CXI provider completion events satisfy the requirements
of the `transmit complete' completion level.
Transmit complete events are generated when the intiator receives an Ack
from the target NIC.
The Ack is generated once all data has been received by the target NIC.
Transmit complete events do not guarantee that data is visibile to the
target process.
.TP
\f[I]FI_DELIVERY_COMPLETE\f[R]
When the `delivery complete' completion level is used, the event
guarantees that data is visible to the target process.
To support this, hardware at the target performs a zero-byte read
operation to flush data across the PCIe bus before generating an Ack.
Flushing reads are performed unconditionally and will lead to higher
latency.
.TP
\f[I]FI_MATCH_COMPLETE\f[R]
When the `match complete' completion level is used, the event guarantees
that the message has been matched to a client-provided buffer.
All messages longer than the eager threshold support this guarantee.
When `match complete' is used with a Send that is shorter than the eager
threshold, an additional handshake may be performed by the provider to
notify the initiator that the Send has been matched.
.PP
The CXI provider also supports the following operation flags:
.IP \[bu] 2
\f[I]FI_INJECT\f[R]
.IP \[bu] 2
\f[I]FI_FENCE\f[R]
.IP \[bu] 2
\f[I]FI_COMPLETION\f[R]
.IP \[bu] 2
\f[I]FI_REMOTE_CQ_DATA\f[R]
.SS Scalable Endpoints
.PP
The CXI provider supports Scalable Endpoints (SEPs).
A pair of TX/RX contexts is generally used by a single thread.
For that reason, a pair of TX/RX contexts shares transmit and receive
resources.
.PP
Each pair of contexts is assigned one PID value.
It follows that a SEP with 10 TX and RX contexts is assigned 10 PIDs.
A client-specified PID value will be used as the base PID value for a
SEP.
For example, a SEP with 10 TX and RX contexts with an assigned PID of
100 will use PIDs 100-109.
.PP
Due to a hardware matching limitation, a SEP that supports messaging
(\f[I]FI_MSG\f[R] or \f[I]FI_TAGGED\f[R]) and \f[I]FI_DIRECTED_RECV\f[R]
must use an AV with \f[I]FI_SYMMETRIC\f[R] set.
.SS Messaging
.PP
The CXI provider supports both tagged (\f[I]FI_TAGGED\f[R]) and untagged
(\f[I]FI_MSG\f[R]) two-sided messaging interfaces.
In the normal case, message matching is performed by hardware.
In certain low resource conditions, the responsibility to perform
message matching may be transferred to software.
Specification of the receive message matching mode in the environment
(\f[I]FI_CXI_RX_MATCH_MODE\f[R]) controls the initial matching mode and
whether hardware matching can transparently onload matching to software
where a hybrid of hardware and software matching is done.
.PP
If a Send operation arrives at a node where there is no matching Receive
operation posted, it is considered unexpected.
Unexpected messages are supported.
The provider manages buffers to hold unexpected message data.
.PP
Unexpected message handling is transparent to clients.
Despite that, clients should take care to avoid excessive use of
unexpected messages by pre-posting Receive operations.
An unexpected message ties up hardware and memory resources until it is
matched with a user buffer.
.PP
The CXI provider implements several message protocols internally.
Message protocol is selected based on payload length.
Short messages are transferred using the eager protocol.
In the eager protocol, the entire message payload is sent along with the
message header.
If an eager message arrives unexpectedly, the entire message is buffered
at the target until it is matched to a Receive operation.
.PP
Long messages are transferred using a rendezvous protocol.
The provider implements two rendezvous protocols: offloaded and eager.
The threshold at which the rendezvous protocol is used is controlled
with the \f[I]FI_CXI_RDZV_THRESHOLD\f[R] environment variable.
.PP
In the offloaded rendezvous protocol, a portion of the message payload
is sent along with the message header.
Once the header is matched to a Receive operation, the remainder of the
payload is pulled from the source using an RDMA Get operation.
If the message arrives unexpectedly, the eager portion of the payload is
buffered at the target until it is matched to a Receive operation.
In the normal case, the Get is performed by hardware and the operation
completes without software progress.
.PP
In the eager rendezvous protocol, the entire payload is sent along with
the message header.
If the message matches a pre-posted Receive operation, the entire
payload is written directly to the matched Receive buffer.
If the message arrives unexpectedly, the message header is saved and the
entire payload is dropped.
Later, when the message is matched to a Receive operation, the entire
payload is pulled from the source using an RDMA Get operation.
.PP
The rendezvous protocol is controlled using the
\f[I]FI_CXI_RDZV_OFFLOAD\f[R] environment variable.
The provider uses the offloaded rendezvous protocol by default.
.PP
Message flow-control is triggered when hardware message matching
resources become exhausted.
Messages may be dropped and retransmitted in order to recover; impacting
performance significantly.
Programs should be careful to avoid posting large numbers of unmatched
receive operations and to minimize the number of outstanding unexpected
messages to prevent message flow-control.
If message matching is configured to support a hybrid mode, when
resources are exhausted hardware and software share matching
responsibility.
.PP
To help avoid this condition, increase Overflow buffer space using
environment variables \f[I]FI_CXI_OFLOW_*\f[R] and software EP match and
hybrid modes Request buffer space using the variables
\f[I]FI_CXI_REQ_*\f[R].
.SS Message Ordering
.PP
The CXI provider supports the following ordering rules:
.IP \[bu] 2
All message Send operations are always ordered.
.IP \[bu] 2
RMA Writes may be ordered by specifying \f[I]FI_ORDER_RMA_WAW\f[R].
.IP \[bu] 2
AMOs may be ordered by specifying
\f[I]FI_ORDER_AMO_{WAW|WAR|RAW|RAR}\f[R].
.IP \[bu] 2
RMA Writes may be ordered with respect to AMOs by specifying
\f[I]FI_ORDER_WAW\f[R].
Fetching AMOs may be used to perform short reads that are ordered with
respect to RMA Writes.
.PP
Ordered RMA size limits are set as follows:
.IP \[bu] 2
\f[I]max_order_waw_size\f[R] is -1.
RMA Writes and non-fetching AMOs of any size are ordered with respect to
each other.
.IP \[bu] 2
\f[I]max_order_raw_size\f[R] is -1.
Fetching AMOs of any size are ordered with respect to RMA Writes and
non-fetching AMOs.
.IP \[bu] 2
\f[I]max_order_war_size\f[R] is -1.
RMA Writes and non-fetching AMOs of any size are ordered with respect to
fetching AMOs.
.SS PCIe Ordering
.PP
Generally, PCIe writes are strictly ordered.
As an optimization, PCIe TLPs may have the Relaxed Order (RO) bit set to
allow writes to be reordered.
Cassini sets the RO bit in PCIe TLPs when possible.
Cassini sets PCIe RO as follows:
.IP \[bu] 2
Ordering of messaging operations is established using completion events.
Therefore, all PCIe TLPs related to two-sided message payloads will have
RO set.
.IP \[bu] 2
Every PCIe TLP associated with an unordered RMA or AMO operation will
have RO cleared.
.IP \[bu] 2
PCIe TLPs associated with the last packet of an ordered RMA or AMO
operation will have RO cleared.
.IP \[bu] 2
PCIe TLPs associated with the body packets (all except the last packet
of an operation) of an ordered RMA operation will have RO set.
.SS Translation
.PP
The CXI provider supports two translation mechanisms: Address
Translation Services (ATS) and NIC Translation Agent (NTA).
Use the environment variable \f[I]FI_CXI_ATS\f[R] to select between
translation mechanisms.
.PP
ATS refers to NIC support for PCIe rev.
4 ATS, PRI and PASID features.
ATS enables the NIC to efficiently access the entire virtual address
space of a process.
ATS mode currently supports AMD hosts using the iommu_v2 API.
.PP
The NTA is an on-NIC translation unit.
The NTA supports two-level page tables and additional hugepage sizes.
Most CPUs support 2MB and 1GB hugepage sizes.
Other hugepage sizes may be supported by SW to enable the NIC to cache
more address space.
.PP
ATS and NTA both support on-demand paging (ODP) in the event of a page
fault.
Use the environment variable \f[I]FI_CXI_ODP\f[R] to enable ODP.
.PP
With ODP enabled, buffers used for data transfers are not required to be
backed by physical memory.
An un-populated buffer that is referenced by the NIC will incur a
network page fault.
Network page faults will significantly impact application performance.
Clients should take care to pre-populate buffers used for data-tranfer
operations to avoid network page faults.
Copy-on-write semantics work as expected with ODP.
.PP
With ODP disabled, all buffers used for data transfers are backed by
pinned physical memory.
Using Pinned mode avoids any overhead due to network page faults but
requires all buffers to be backed by physical memory.
Copy-on-write semantics are broken when using pinned memory.
See the Fork section for more information.
.SS Translation Cache
.PP
Mapping a buffer for use by the NIC is an expensive operation.
To avoid this penalty for each data transfer operation, the CXI provider
maintains an internal translation cache.
.PP
When using the ATS translation mode, the provider does not maintain
translations for individual buffers.
It follows that translation caching is not required.
.SS Fork
.PP
The CXI provider supports pinned and demand-paged translation modes.
When using pinned memory, accessing an RDMA buffer from a forked child
process is not supported and may lead to undefined behavior.
To avoid issues, fork safety can be enabled by defining the environment
variables CXI_FORK_SAFE and CXI_FORK_SAFE_HP.
.SS GPUs
.PP
GPU support is planned.
.SH OPTIMIZATION
.SS Optimized MRs
.PP
The CXI provider has two separate MR implementations: standard and
optimized.
Standard MRs are designed to support applications which require a large
number of remote memory regions.
Optimized MRs are designed to support one-sided programming models that
allocate a small number of large remote memory windows.
The CXI provider can achieve higher RMA Write rates when targeting an
optimized MR.
.PP
Both types of MRs are allocated using fi_mr_reg.
MRs with client-provided key in the range [0-99] are optimized MRs.
MRs with key greater or equal to 100 are standard MRs.
An application may create a mix of standard and optimized MRs.
To disable the use of optimized MRs, set environment variable
\f[I]FI_CXI_OPTIMIZED_MRS=false\f[R].
When disabled, all MR keys are available and all MRs are implemented as
standard MRs.
All communicating processes must agree on the use of optimized MRs.
.SS Optimized RMA
.PP
Optimized MRs are one requirement for the use of low overhead packet
formats which enable higher RMA Write rates.
An RMA Write will use the low overhead format when all the following
requirements are met:
.IP \[bu] 2
The Write targets an optimized MR
.IP \[bu] 2
The target MR does not require remote completion notifications (no
\f[I]FI_RMA_EVENT\f[R])
.IP \[bu] 2
The Write does not have ordering requirements (no \f[I]FI_RMA_WAW\f[R])
.PP
Theoretically, Cassini has resources to support 64k standard MRs or 2k
optimized MRs.
Practically, the limits are much lower and depend greatly on application
behavior.
.PP
Hardware counters can be used to validate the use of the low overhead
packets.
The counter C_CNTR_IXE_RX_PTL_RESTRICTED_PKT counts the number of low
overhead packets received at the target NIC.
Counter C_CNTR_IXE_RX_PTL_UNRESTRICTED_PKT counts the number of ordered
RDMA packets received at the target NIC.
.PP
Message rate performance may be further optimized by avoiding target
counting events.
To avoid counting events, do not bind a counter to the MR.
To validate optimal writes without target counting events, monitor the
counter: C_CNTR_LPE_PLEC_HITS.
.SS Unreliable AMOs
.PP
By default, all AMOs are resilient to intermittent packet loss in the
network.
Cassini implements a connection-based reliability model to support
reliable execution of AMOs.
.PP
The connection-based reliability model may be disabled for AMOs in order
to increase message rate.
With reliability disabled, a lost AMO packet will result in operation
failure.
A failed AMO will be reported to the client in a completion event as
usual.
Unreliable AMOs may be useful for applications that can tolerate
intermittent AMO failures or those where the benefit of increased
message rate outweighs by the cost of restarting after a failure.
.PP
Unreliable, non-fetching AMOs may be performed by specifying the
\f[I]FI_CXI_UNRELIABLE\f[R] flag.
Unreliable, fetching AMOs are not supported.
Unreliable AMOs must target an optimized MR and cannot use remote
completion notification.
Unreliable AMOs are not ordered.
.SS High Rate Put
.PP
High Rate Put (HRP) is a feature that increases message rate performance
of RMA and unreliable non-fetching AMO operations at the expense of
global ordering guarantees.
.PP
HRP responses are generated by the fabric egress port.
Responses are coalesced by the fabric to achieve higher message rates.
The completion event for an HRP operation guarantees delivery but does
not guarantee global ordering.
If global ordering is needed following an HRP operation, the source may
follow the operation with a normal, fenced Put.
.PP
HRP RMA and unreliable AMO operations may be performed by specifying the
\f[I]FI_CXI_HRP\f[R] flag.
HRP AMOs must also use the \f[I]FI_CXI_UNRELIABLE\f[R] flag.
Monitor the hardware counter C_CNTR_HNI_HRP_ACK at the initiator to
validate that HRP is in use.
.SS Counters
.PP
Cassini offloads light-weight counting events for certain types of
operations.
The rules for offloading are:
.IP \[bu] 2
Counting events for RMA and AMO source events are always offloaded.
.IP \[bu] 2
Counting events for RMA and AMO target events are always offloaded.
.IP \[bu] 2
Counting events for Sends are offloaded when message size is less than
the rendezvous threshold.
.IP \[bu] 2
Counting events for message Receives are never offloaded by default.
.PP
Software progress is required to update counters unless the criteria for
offloading are met.
.SH RUNTIME PARAMETERS
.PP
The CXI provider checks for the following environment variables:
.TP
\f[I]FI_CXI_ODP\f[R]
Enables on-demand paging.
If disabled, all DMA buffers are pinned.
.TP
\f[I]FI_CXI_ATS\f[R]
Enables PCIe ATS.
If disabled, the NTA mechanism is used.
.TP
\f[I]FI_CXI_ATS_MLOCK_MODE\f[R]
Sets ATS mlock mode.
The mlock() system call may be used in conjunction with ATS to help
avoid network page faults.
Valid values are \[lq]off\[rq] and \[lq]all\[rq].
When mlock mode is \[lq]off\[rq], the provider does not use mlock().
An application using ATS without mlock() may experience network page
faults, reducing network performance.
When ats_mlock_mode is set to \[lq]all\[rq], the provider uses
mlockall() during initialization with ATS.
mlockall() causes all mapped addresses to be locked in RAM at all times.
This helps to avoid most network page faults.
Using mlockall() may increase pressure on physical memory.
Ignored when ODP is disabled.
.TP
\f[I]FI_CXI_RDZV_OFFLOAD\f[R]
Controls the offload of the rendezvous messaging protocol, defaults to
offloaded rendezvous protocol.
Selecting the eager rendezvous protocol by disabling offload requires
that message offload is enabled and will override the setting of
\f[I]FI_CXI_MSG_OFFLOAD\f[R] and disable the fallback to software
managed EP mode when hardware resources are low.
.TP
\f[I]FI_CXI_RDZV_THRESHOLD\f[R]
Message size threshold for rendezvous protocol.
.TP
\f[I]FI_CXI_RDZV_GET_MIN\f[R]
Minimum rendezvous Get payload size.
A Send with length less than or equal to \f[I]FI_CXI_RDZV_THRESHOLD\f[R]
plus \f[I]FI_CXI_RDZV_GET_MIN\f[R] will be performed using the eager
protocol.
Larger Sends will be performed using the rendezvous protocol with
\f[I]FI_CXI_RDZV_THRESHOLD\f[R] bytes of payload sent eagerly and the
remainder of the payload read from the source using a Get.
\f[I]FI_CXI_RDZV_THRESHOLD\f[R] plus \f[I]FI_CXI_RDZV_GET_MIN\f[R] must
be less than or equal to \f[I]FI_CXI_OFLOW_BUF_SIZE\f[R].
.TP
\f[I]FI_CXI_RDZV_EAGER_SIZE\f[R]
Eager data size for rendezvous protocol.
.TP
\f[I]FI_CXI_OFLOW_BUF_SIZE\f[R]
Overflow buffer size.
.TP
\f[I]FI_CXI_OFLOW_BUF_COUNT\f[R]
Overflow buffer count.
.TP
\f[I]FI_CXI_OPTIMIZED_MRS\f[R]
Enables optimized memory regions.
.TP
\f[I]FI_CXI_LLRING_MODE\f[R]
Set the policy for use of the low-latency command queue ring mechanism.
This mechanism improves the latency of command processing on an idle
command queue.
Valid values are idle, always, and never.
.TP
\f[I]FI_CXI_CQ_POLICY\f[R]
Experimental.
Set Command Queue write-back policy.
Valid values are always, high_empty, low_empty, and low.
\[lq]always\[rq], \[lq]high\[rq], and \[lq]low\[rq] refer to the
frequency of write-backs.
\[lq]empty\[rq] refers to whether a write-back is performed when the
queue becomes empty.
.TP
\f[I]FI_CXI_DEFAULT_VNI\f[R]
Default VNI value (masked to 16 bits).
.TP
\f[I]FI_CXI_EQ_ACK_BATCH_SIZE\f[R]
Number of EQ events to process before writing an acknowledgement to HW.
Batching ACKs amortizes the cost of event acknowledgement over multiple
network operations.
.TP
\f[I]FI_CXI_RX_MATCH_MODE\f[R]
Specify the receive message matching mode to be utilized.
.RS
.PP
\f[I]\[lq]hardware\[rq]\f[R] - Message matching is fully offloaded, if
resources become exhausted flow control will be performed.
.PP
\f[I]\[lq]software\[rq]\f[R] - Message matching is fully onloaded.
.PP
\f[I]\[lq]hybrid\[rq]\f[R] - Message matching begins fully offloaded, if
resources become exhuasted hardware will transition message matching to
a hybrid of hardware and software matching.
.PP
For both \f[I]\[lq]hybrid\[rq]\f[R] and \f[I]\[lq]software\[rq]\f[R]
modes, rendezvous processing must be offloaded, and care should be taken
to minimize the threshold for rendezvous processing
(i.e.\ \f[I]FI_CXI_RDZV_THRESHOLD\f[R] + \f[I]FI_CXI_RDZV_GET_MIN\f[R]).
The environment variables \f[I]FI_CXI_REQ_BUF_SIZE\f[R] and
\f[I]FI_CXI_REQ_BUF_COUNT\f[R] are used to control the size and number
of request buffers posted to handle incoming unmatched messages.
.RE
.TP
\f[I]FI_CXI_REQ_BUF_SIZE\f[R]
Size of request buffers.
Increasing the request buffer size allows for more unmatched messages to
be sent into a single request buffer.
.TP
\f[I]FI_CXI_REQ_BUF_COUNT\f[R]
Number of request buffers.
Dynamically increasing and decreasing request buffer count is not
currently supported.
.TP
\f[I]FI_CXI_MSG_LOSSLESS\f[R]
Enable or disable lossless receive matching.
If hardware resources are exhausted, hardware will pause the associated
traffic class until a overflow buffer (hardware match mode) or request
buffer (software match mode or hybrid match mode) is posted.
This is considered experimental and defaults to disabled.
.TP
\f[I]FI_CXI_FC_RETRY_USEC_DELAY\f[R]
Number of micro-seconds to sleep before retrying a dropped side-band,
flow control message.
Setting to zero will disable any sleep.
.TP
\f[I]FI_UNIVERSE_SIZE\f[R]
Defines the maximum number of processes that will be used by distribute
OFI application.
.TP
\f[I]FI_CXI_CTRL_RX_EQ_MAX_SIZE\f[R]
Max size of the receive event queue used for side-band/control messages.
Default receive event queue size is based on FI_UNIVERSE_SIZE.
Increasing the receive event queue size can help prevent
side-band/control messages from being dropped and retried but at the
cost of additional memory usage.
Size is always aligned up to a 4KiB boundary.
.TP
\f[I]FI_CXI_DEFAULT_CQ_SIZE\f[R]
Change the provider default completion queue size.
This may be useful for applications which rely on middleware, and
middleware defaults the completion queue size to the provider default.
.TP
\f[I]FI_CXI_DISABLE_CQ_HUGETLB\f[R]
By default, the provider will attempt to allocate 2 MiB hugetlb pages
for provider event queues used to implement a libfabric completion
queue.
Disabling hugetlb support will cause the provider to fallback to memory
allocators using host page sizes.
.TP
\f[I]FI_CXI_DEVICE_NAME\f[R]
Restrict CXI provider to specific CXI devices.
Format is a comma separated list of CXI devices (e.g.\ cxi0,cxi1).
.TP
\f[I]FI_CXI_CQ_FILL_PERCENT\f[R]
Fill percent of underlying hardware event queue used to determine when
completion queue is saturated.
A saturated completion queue results in the provider returning
-FI_EAGAIN for data transfer and other related libfabric operations.
.PP
Note: Use the fi_info utility to query provider environment variables:
fi_info -p cxi -e
.SH CXI EXTENSIONS
.PP
The CXI provider supports various fabric-specific extensions.
Extensions are accessed using the fi_open_ops function.
.SS CXI Domain Extensions
.PP
CXI domain extensions have been named \f[I]FI_CXI_DOM_OPS_1\f[R].
The flags parameter is ignored.
The fi_open_ops function takes a \f[C]struct fi_cxi_dom_ops\f[R].
See an example of usage below:
.IP
.nf
\f[C]
struct fi_cxi_dom_ops *dom_ops;

ret = fi_open_ops(&domain->fid, FI_CXI_DOM_OPS_2, 0, (void **)&dom_ops, NULL);
\f[R]
.fi
.PP
The following domain extensions are defined:
.IP
.nf
\f[C]
struct fi_cxi_dom_ops {
    int (*cntr_read)(struct fid *fid, unsigned int cntr, uint64_t *value,
              struct timespec *ts);
    int (*topology)(struct fid *fid, unsigned int *group_id,
                  unsigned int *switch_id, unsigned int *port_id);
};
\f[R]
.fi
.PP
The cntr_read extension is used to read hardware counter values.
Valid values of the cntr argument are found in the Cassini-specific
header file cassini_cntr_defs.h.
Note that Counter accesses by applications may be rate-limited to 1HZ.
.PP
The topology extension is used to return CXI NIC address topology
information for the domain.
Currently only a dragonfly fabric topology is reported.
.SS CXI Counter Extensions
.PP
CXI counter extensions have been named \f[I]FI_CXI_COUNTER_OPS\f[R].
The flags parameter is ignored.
The fi_open_ops function takes a \f[C]struct fi_cxi_cntr_ops\f[R].
See an example of usage below.
.IP
.nf
\f[C]
struct fi_cxi_cntr_ops *cntr_ops;

ret = fi_open_ops(&cntr->fid, FI_CXI_COUNTER_OPS, 0, (void **)&cntr_ops, NULL);
\f[R]
.fi
.PP
The following domain extensions are defined:
.IP
.nf
\f[C]
struct fi_cxi_cntr_ops {
    /* Set the counter writeback address to a client provided address. */
    int (*set_wb_buffer)(struct fid *fid, const void *buf, size_t len);

    /* Get the counter MMIO region. */
    int (*get_mmio_addr)(struct fid *fid, void **addr, size_t *len);
};
\f[R]
.fi
.SS CXI Counter Writeback Flag
.PP
If a client is using the CXI counter extensions to define a counter
writeback buffer, the CXI provider will not update the writeback buffer
success or failure values for each hardware counter success or failure
update.
This can especially create issues when clients expect the completion of
a deferred workqueue operation to generate a counter writeback.
To support this, the flag \f[I]FI_CXI_CNTR_WB\f[R] can be used in
conjunction with a deferred workqueue operation to force a writeback at
the completion of the deferred workqueue operation.
See an example of usage below.
.IP
.nf
\f[C]
struct fi_op_rma rma = {
  /* Signal to the provider the completion of the RMA should trigger a
   * writeback.
   */
  .flags = FI_CXI_CNTR_WB,
};

struct fi_deferred_work rma_work = {
  .op_type = FI_OP_READ,
  .triggering_counter = cntr,
  .completion_cntr = cntr,
  .threshold = 1,
  .op.rma = &rma,
};

ret = fi_control(&domain->fid, FI_QUEUE_WORK, &rma_work);
\f[R]
.fi
.PP
\f[B]Note:\f[R] Using \f[I]FI_CXI_CNTR_WB\f[R] will lead to additional
hardware usage.
To conserve hardware resources, it is recommended to only use the
\f[I]FI_CXI_CNTR_WB\f[R] when a counter writeback is absolutely
required.
.SH FABTESTS
.PP
The CXI provider does not currently support fabtests which depend on IP
addressing.
.PP
fabtest RDM benchmarks are supported, like:
.IP
.nf
\f[C]
# Start server by specifying source PID and interface
\&./fabtests/benchmarks/fi_rdm_tagged_pingpong -B 10 -s cxi0

# Read server NIC address
CXI0_ADDR=$(cat /sys/class/cxi/cxi0/device/properties/nic_addr)

# Start client by specifying server PID and NIC address
\&./fabtests/benchmarks/fi_rdm_tagged_pingpong -P 10 $CXI0_ADDR

# The client may be bound to a specific interface, like:
\&./fabtests/benchmarks/fi_rdm_tagged_pingpong -B 10 -s cxi1 -P 10 $CXI0_ADDR
\f[R]
.fi
.PP
Some functional fabtests are supported (including fi_bw).
Others use IP sockets and are not yet supported.
.PP
multinode fabtests are not yet supported.
.PP
ubertest is supported for test configs matching the provider\[cq]s
current capabilities.
.PP
unit tests are supported where the test feature set matches the CXI
provider\[cq]s current capabilities.
.SH ERRATA
.IP \[bu] 2
Fetch and compare type AMOs with FI_DELIVERY_COMPLETE or
FI_MATCH_COMPLETE completion semantics are not supported with
FI_RMA_EVENT.
.SH SEE ALSO
.PP
\f[C]fabric\f[R](7), \f[C]fi_provider\f[R](7),
.SH AUTHORS
OpenFabrics.
