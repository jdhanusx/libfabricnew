
properties([disableConcurrentBuilds(abortPrevious: true)])
def DO_RUN=1
def TARGET="main"

def check_target() {
    echo "CHANGE_TARGET = ${env.CHANGE_TARET}"
    if (changeRequest()) {
        TARGET = env.CHANGE_TARGET
    }
}

def skip() {
    def file = "${env.WORKSPACE}/commit_id"
    if (!fileExists(file)) {
        echo "CI Run has not rebased with ofiwg/libfabric. Please Rebase."
        return 1
    }

    def changes = readFile file
    def changeStrings = new ArrayList<String>()

    for (line in changes.readLines()) {
        changeStrings.add(line)
    }

    echo "${changeStrings.toArray()}"
    if (changeStrings.toArray().every { it =~ /(?:fabtests\/pytests|man|prov\/efa|prov\/opx).*$/ }) {
        echo "DONT RUN!"
        return 0
    }

    if (changeStrings.isEmpty()) {
        echo "DONT RUN!"
        return 0
    }

    return 1
}


pipeline {
    agent { node { label 'master' } }
    options {
        timestamps()
        timeout(activity: true, time: 1, unit: 'HOURS')
    }
    environment {
        JOB_CADENCE = 'PR'
    }

    stages {
        stage ('opt-out') {
            steps {
                script {
                    check_target()
                }
                withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
                  sh """
                    mkdir ${env.WORKSPACE}/py_scripts
                    git clone ${env.UPSTREAM} ${env.WORKSPACE}/py_scripts
                    ${env.SKIP_PATH}/skip.sh ${env.WORKSPACE} ${TARGET}
                  """
                }
                script {
                    DO_RUN=skip()
                }
            }
        }
        stage ('build') {
            when { equals expected: 1, actual: DO_RUN }
            steps {
                withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH']) {
                  sh """
                    echo "-----------------------------------------------------"
                    echo "Copy build dirs."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=builddir
                    echo "Copy build dirs completed."
                    echo "-----------------------------------------------------"

                    echo "-----------------------------------------------------"
                    echo "Building libfabric reg."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=libfabric
                    echo "-----------------------------------------------------"
                    echo "Building libfabric dbg."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=libfabric --ofi_build_mode=dbg
                    echo "-----------------------------------------------------"
                    echo "Building libfabric dl."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=libfabric --ofi_build_mode=dl
                    echo "Libfabric builds completed."

                    echo "-----------------------------------------------------"
                    echo "Building fabtests reg."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=fabtests
                    echo "-----------------------------------------------------"
                    echo "Building fabtests dbg."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=fabtests --ofi_build_mode=dbg
                    echo "-----------------------------------------------------"
                    echo "Building fabtests dl."
                    python3.7 ${env.WORKSPACE}/contrib/intel/jenkins/build.py --build_item=fabtests --ofi_build_mode=dl
                    echo 'Fabtests builds completed.'

                  """
                }
            }
        }
        stage('parallel-tests') {
            when { equals expected: 1, actual: DO_RUN }
            parallel {
                stage('ze-shm') {
                    agent {node {label 'ze'}}
                    options { skipDefaultCheckout() }
                    steps {
                        withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin/:$PYTHONPATH'])
                        {
                          sh """
                            env
                            (
                                cd /opt${env.WORKSPACE}/contrib/intel/jenkins/
                                python3.7 runtests.py --prov=shm --device='ze'
                                echo "ze-shm completed."
                            )
                          """
                        }
                    }
                }
            }
        }
    }

    post {
        cleanup {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
                sh "rm -rf '${env.CI_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}/ci_middlewares'"
                sh "rm -rf '${env.CI_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}/reg'"
                sh "rm -rf '${env.CI_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}/dbg'"
                sh "rm -rf '${env.CI_INSTALL_DIR}/${env.JOB_NAME}/${env.BUILD_NUMBER}/dl'"
                sh "rm -rf '${env.WORKSPACE}/py_scripts'"
            }
        }
        success {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:$PYTHONPATH']) {
                dir("${env.WORKSPACE}") {
                    deleteDir()
                }
                dir("${env.WORKSPACE}@tmp") {
                    deleteDir()
                }
            }
        }
    }
}

